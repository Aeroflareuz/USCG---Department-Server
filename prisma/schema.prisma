// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  robloxUsername    String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  
  rank              String?
  division          String?
  status            String?   @default("Active")
  joinDate          DateTime  @default(now())
  
  role              Role      @default(OFFICER)
  
  accounts          Account[]
  sessions          Session[]
  assignedOperations OperationAssignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User roles for RBAC
enum Role {
  ADMIN
  COMMANDER
  OFFICER
  CADET
}

// Models for vessel management
model Vessel {
  id              String   @id @default(cuid())
  name            String
  callSign        String   @unique
  vesselClass     String
  vesselType      String
  status          String   @default("Active")
  homePort        String
  currentLocation String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  maintenanceRecords MaintenanceRecord[]
  operations         Operation[]
}

// Models for equipment management
model Equipment {
  id             String   @id @default(cuid())
  equipmentId    String   @unique
  type           String
  assignedTo     String?
  condition      String
  lastInspection DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  maintenanceRecords MaintenanceRecord[]
}

// Models for maintenance tracking
model MaintenanceRecord {
  id                String   @id @default(cuid())
  maintenanceType   String
  startDate         DateTime
  completionDate    DateTime?
  status            String
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  vesselId          String?
  vessel            Vessel?  @relation(fields: [vesselId], references: [id])
  
  equipmentId       String?
  equipment         Equipment? @relation(fields: [equipmentId], references: [id])
}

// Models for operations and mission planning
model Operation {
  id                String   @id @default(cuid())
  operationId       String   @unique
  name              String
  type              String
  location          String
  status            String   @default("Planned")
  startDate         DateTime
  endDate           DateTime?
  commander         String
  objective         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  vesselId          String?
  vessel            Vessel?   @relation(fields: [vesselId], references: [id])
  
  assignments       OperationAssignment[]
  updates           OperationUpdate[]
}

model OperationAssignment {
  id           String    @id @default(cuid())
  operationId  String
  operation    Operation @relation(fields: [operationId], references: [id])
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  role         String
  startDate    DateTime
  endDate      DateTime?
  status       String    @default("Assigned")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model OperationUpdate {
  id           String    @id @default(cuid())
  operationId  String
  operation    Operation @relation(fields: [operationId], references: [id])
  message      String
  timestamp    DateTime  @default(now())
  createdBy    String
  updatedAt    DateTime  @updatedAt
}

// Models for chat and notifications
model Notification {
  id           String   @id @default(cuid())
  userId       String
  title        String
  message      String
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
}
